{"version":3,"sources":["../../src/controllers/user_controller.js"],"names":["Router","require","User","user","passport","serialize","toHumanReadable","return404","return401","pick","jwtAuthenticate","authenticate","session","route","post","req","res","next","err","clearCookie","accepts","status","json","success","redirect","params","message","get","findById","id","then","profile","serializeFields","toString","allowedParams","body","update","where","returning","results","undefined","value","catch","errors","replace","module","exports"],"mappings":"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","file":"user_controller.js","sourcesContent":["const Router = require('express').Router;\nconst User = require('../models').user;\nconst passport = require('passport');\nconst {\n  serialize,\n  toHumanReadable,\n} = require('../utils');\n\nconst { return404, return401 } = require('../utils/responseHelper');\nconst { pick } = require('ramda');\n\nconst jwtAuthenticate = passport.authenticate('jwt', { session: false });\n\nconst route = new Router();\n\nroute.post('/sign_out', (req, res, next) => {\n  passport.authenticate('jwt', { session: false }, (err, user) => {\n    if (user) {\n      res.clearCookie('jwt_token');\n\n      return req.accepts('json')  \n        ? res.status(200).json({ success: true })\n        : res.redirect(200, req.params.redirect || '/');\n    }\n\n    return return401(res, 'you\\'ve sign out already.');\n  })(req, res, next);\n});\n\n/* [TODO] user upload avatar logic */\nroute\n  .route('/:id/avatar')\n  .post(jwtAuthenticate, (req, res, next) => {\n    res.json({\n      message: 'not yet implement.'\n    })\n  })\nroute\n  .route('/:id/profile')\n  .get((req, res) => {\n    User\n      .findById(req.params.id)\n      .then((user) => {\n        if (!user) {\n          return return404(res, 'user doesn\\'t exist');\n        }\n\n        return res.json({\n          profile: serialize(user.serializeFields, user) \n        })\n      });\n  })\n  .post(jwtAuthenticate, (req, res, next) => {\n    if (req.user.id.toString() !== req.params.id) {\n      return res.status(401).json();\n    }\n    \n    const allowedParams = pick(req.user.serializeFields)(req.body);\n\n    User.update(allowedParams, { where: { id: req.params.id }, returning: true })\n      .then(results => {\n        const user = results[1] !== undefined ? results[1][0] : null;\n        return user && serialize(user.serializeFields, user)\n      })\n      .then(value => {\n        res.json({ profile: value });\n      })\n      .catch(err => {\n        res.status(400).json({\n          errors: toHumanReadable(err.message.replace('Validation error:', ''))\n        })\n      })\n  });\n\nmodule.exports = route;\n\n"]}