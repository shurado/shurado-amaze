{"version":3,"sources":["../../src/controllers/feed_controller.js"],"names":["passport","require","v1","multer","pick","Router","serialize","pickDataValues","return401","Feed","feed","upload","uploader","jwtAuthenticate","authenticate","session","route","get","req","res","next","findById","params","id","include","then","json","serializeFields","FEED_LIMIT","offset","parseInt","body","nextPageId","findAll","limit","Number","isNaN","feeds","map","values","length","hasNext","post","single","allowedParams","file","progress","buffer","mimetype","on","data","user","createFeed","addFeedSpot","catch","message","error","replace","status","all","getActiveComments","comments","text","comment_type","addCommentToFeed","user_id","comment","author","module","exports"],"mappings":"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","file":"feed_controller.js","sourcesContent":["const passport = require('passport');\nconst v1 = require('uuid/v1');\nconst multer = require('multer');\nconst { pick } = require('ramda');\nconst Router = require('express').Router;\nconst { serialize, pickDataValues } = require('../utils');\nconst { return401 } = require('../utils/responseHelper');\nconst Feed = require('../models').feed;\nconst upload = require('../middlewares/upload');\n\nconst uploader = multer();\nconst jwtAuthenticate = passport.authenticate('jwt', { session: false });\n\nconst route = new Router();\n\nroute.get('/:id', (req, res, next) => {\n  Feed\n    .findById(req.params.id, { include: ['user'] })\n    .then((feed) => {\n      if (feed) {\n        return res.json({\n          feed: serialize(feed.serializeFields, feed)\n        })\n      }\n    });\n});\n\n/* [TODO] add spot */\nroute\n  .route('/')\n  .get((req, res) => {\n    const FEED_LIMIT = 15;\n    const offset = parseInt(req.body.nextPageId, 10);\n\n    Feed\n      .findAll({ limit: FEED_LIMIT, offset: Number.isNaN(offset) ? 0 : offset, include: ['user'] })\n      .then(feeds => feeds.map(pickDataValues))\n      .then(values => {\n        if (values.length === 0) {\n          return res.json({\n            hasNext: false,\n            feeds: [],\n          });\n        }\n\n        return res.json({\n          hasNext: true,\n          nextPageId: offset + FEED_LIMIT,\n          feeds: values\n        });\n      })\n  })\n  .post(jwtAuthenticate, uploader.single('image'), (req, res, next) => {\n    const allowedParams = ['caption', 'image_url'];\n\n    /* [TODO] handle req.file undefined. simplify logic. */\n    if (req.file) {\n      const progress = upload('feeds/' + v1(), req.file.buffer, req.file.mimetype);\n\n      progress.on('complete', (data) => {\n        req.user\n          .createFeed()\n          .then(feed => {\n            return feed.addFeedSpot(req.body);\n          })\n          .then(pickDataValues)\n          .then(values => {\n            res.json({ feed: values })\n          })\n          .catch(error => {\n            const message = error.message\n              .replace(\"null value in column \\\"caption\\\" violates not-null constraint\", '貼文內容不可為空白')\n              .replace(/Validation error: /g, '');\n\n            res.status(400).json({ error: message });\n          })\n      })\n    } else {\n      req.user\n        .createFeed(pick(allowedParams)(req.body))\n        .then(feed => {\n          return feed.addFeedSpot(req.body)\n        })\n        .then(pickDataValues)\n        .then(values => {\n          res.json({ feed: values })\n        })\n        .catch(error => {\n          const message = error.message\n            .replace(\"null value in column \\\"caption\\\" violates not-null constraint\", '貼文內容不可為空白')\n            .replace(/Validation error: /g, '');\n\n          res.status(400).json({ error: message });\n        })\n    }\n  });\n\nroute\n  .route('/:id/comments')\n  .all((req, res, next) => {\n    Feed.findById(req.params.id).then(feed => {\n      \n      if (feed) {\n        req.feed = feed;\n        return next();\n      }\n\n      next('Feed not Found.');\n    });\n  })\n  .get((req, res, next) => {\n    req.feed.getActiveComments()\n      .then(comments => {\n        return res.json({\n          comments\n        })\n      })\n      .then()\n  })\n  .post(jwtAuthenticate, (req, res, next) => {\n    if (!req.user) {\n      return return401(res);\n    }\n\n    const id = req.user.id;\n\n    Feed.findById(req.params.id)\n      .then(feed => {\n        const { text, comment_type } = req.body;\n        if (feed) {\n          feed.addCommentToFeed({\n            text,\n            user_id: id,\n            comment_type\n          }).then(comment => {\n            res.json({\n              comment: serialize(comment.serializeFields, comment),\n              author: pick(['username', 'nickname', 'avatar_url'], req.user)\n            })\n          })\n        } else {\n          return next('Feed not Found!');\n        }\n      })\n  });\n\nmodule.exports = route;\n\n"]}