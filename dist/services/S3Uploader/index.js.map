{"version":3,"sources":["../../../src/services/S3Uploader/index.js"],"names":["EventEmitter","require","aws","NotyetImplmentError","ArgumentError","AWSResponseError","TimeoutError","Readable","inherits","DEFAULT_TIMEOUT","S3Uploader","options","accessKeyId","secretAccessKey","region","validParams","join","_accessKeyId","_secretAccessKey","_bucket","bucket","_isUploading","_timeout","timeout","_init","_onFileUpload","call","prototype","_s3","S3","params","Bucket","ACL","upload","uploadObj","isMultiUpload","Array","isArray","isReadableStream","obj","isValidUploadArr","every","body","TypeError","_isMultiUpload","_uploadObjects","_uploadObject","emit","_handleUpload","s3","self","on","forEach","uploader","Key","object","key","file","Body","send","err","data","clearTimeout","ev","_onUploadTimeout","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst aws = require('aws-sdk');\nconst { NotyetImplmentError, ArgumentError, AWSResponseError, TimeoutError } = require('./errors');\nconst { Readable } = require('stream');\nconst { inherits } = require('util');\n\nconst DEFAULT_TIMEOUT = 30 * 1000; // seconds\n\n\nfunction S3Uploader(options = {}) {\n  const { accessKeyId, secretAccessKey, region } = options;\n  \n\n  if (!accessKeyId || !secretAccessKey || !region) {\n    const validParams = ['`accessKeyId`', '`secretAccessKey`', '`region`'];\n    throw new ArgumentError(`options ${validParams.join(', ')} is required.`);\n  }\n\n  this._accessKeyId     = accessKeyId;\n  this._secretAccessKey = secretAccessKey;\n  this._bucket          = options.bucket || null;\n  this._isUploading     = false;\n  this._timeout = options.timeout || DEFAULT_TIMEOUT;\n\n  this._init();\n  this._onFileUpload();\n\n  EventEmitter.call(this);\n  return this;\n}\n\ninherits(S3Uploader, EventEmitter);\n\nS3Uploader.prototype._init = function() {\n  return this._s3 = new aws.S3({\n    params: {\n      Bucket: this._bucket,\n      ACL: 'public-read'\n    },\n    accessKeyId: this._accessKeyId,\n    secretAccessKey: this._secretAccessKey,\n  });\n}\n\nS3Uploader.prototype.upload = function(uploadObj) {\n  const isMultiUpload = Array.isArray(uploadObj);\n  const isReadableStream = (obj) => obj instanceof Readable;\n\n  if (isMultiUpload) {\n    const isValidUploadArr = uploadObj.every(obj => obj.body && isReadableStream(obj.body));\n\n    if (!isValidUploadArr) {\n      throw TypeError('upload Array must contain Readable Stream');      \n    }\n\n    this._isMultiUpload = true;\n    this._uploadObjects = uploadObj;\n  } else if (uploadObj.body && isReadableStream(uploadObj)) {\n    this._isMultiUpload = false;\n    this._uploadObject = uploadObj;\n  } else {\n    throw TypeError('You need to provide Stream!');\n  }\n\n  this.emit('upload', uploadObj);\n}\n\n\nS3Uploader.prototype._handleUpload = function(upload) {\n  throw new NotyetImplmentError();\n}\n\nS3Uploader.prototype._onFileUpload = function() {\n  const s3 = this._s3;\n  const self = this;\n\n  this.on('upload', uploadObj => {\n    if (this._isMultiUpload) {\n      uploadObj.forEach(object => {\n        const uploader = s3.upload({\n          Bucket: this._bucket,\n          Key: object.key || object.file,\n          Body: object.body\n        });\n\n        uploader.send((err, data) => {\n          if (err) {\n            self.emit('error', AWSResponseError(err));\n            return;\n          }\n\n          self.emit('complete', data);\n          clearTimeout(this._timeout);\n        })\n\n        uploader.on('httpUploadProgress', (ev) => this.emit('progress', ev));\n      })\n    } else {\n      // [TODO] copy paste.\n      const uploader = s3.upload({\n        Bucket: this._bucket,\n        Key: uploadObj.key || uploadObj.file,\n        Body: uploadObj.body\n      });\n\n      uploader.send((err, data) => {\n        if (err) {\n          self.emit('error', AWSResponseError(err));\n          return;\n        }\n\n        self.emit('complete', data);\n        clearTimeout(this._timeout);\n      })\n\n      uploader.on('httpUploadProgress', (ev) => this.emit('progress', ev));\n    }\n  })\n}\n\nS3Uploader.prototype._onUploadTimeout = function() {\n  this.emit('timeout', new TimeoutError('upload timeout, upload aborted.'))\n}\n\nmodule.exports = S3Uploader;\n"]}