{"version":3,"sources":["../../../src/services/WebParser/index.js"],"names":["request","require","cheerio","pickAll","MAX_RESPONSE_TIMEOUT","URL_REG","YOUTUBE_REG","ERROR_CODE_RESPONSE","TARGET_META_PROPERTYS","NotValidURLError","message","name","ResponseError","prototype","Error","WebParser","parseWeb","url","Promise","resolve","reject","test","timeout","error","response","body","statusCode","indexOf","$","load","parseMeta","pickPropertyMeta","i","elm","prop","metasArray","Array","slice","call","map","reduce","acc","curr","key","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const request = require('request');\nconst cheerio = require('cheerio');\nconst { pickAll } = require('ramda');\n\nconst MAX_RESPONSE_TIMEOUT = 10 * 1000;\nconst URL_REG = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig; // eslint-disable-line no-useless-escape\nconst YOUTUBE_REG = /(?:youtube\\.com\\/\\S*(?:(?:\\/e(?:mbed))?\\/|watch\\/?\\?(?:\\S*?&?v\\=))|youtu\\.be\\/)([a-zA-Z0-9_-]{6,11})/g; // eslint-disable-line no-useless-escape\n\nconst ERROR_CODE_RESPONSE = [400, 404, 500, 403, 401, 402, 302];\n\nconst TARGET_META_PROPERTYS = ['og:type', 'og:description', 'og:title', 'og:url', 'og:image'];\n\nfunction NotValidURLError(message) {\n  this.name = 'NotValidURLError';\n  this.message = message;\n\n  return this;\n}\n\nfunction ResponseError(message) {\n  this.name = 'ResponseError';\n  this.message = message;\n\n  return this;\n}\n\n\nNotValidURLError.prototype = Error.prototype;\n\nfunction WebParser() {\n  return this;\n}\n\nWebParser.parseWeb = (url) => {\n  \n  return new Promise((resolve, reject) => {\n    if (!URL_REG.test(url)) {\n      reject(new NotValidURLError(`input is not Valid URL, got \\`${url}\\``));\n    }  \n    request({ url, timeout: MAX_RESPONSE_TIMEOUT }, (error, response, body) => {\n      if (error) {\n        return reject(new ResponseError(`Response with error ${error}`));\n      }\n\n      if ((response && response.statusCode) \n          && ERROR_CODE_RESPONSE.indexOf(response.statusCode) !== -1) {\n        return reject(new ResponseError(`Response with error code \\`${response.statusCode}\\` with URL ${url}`))\n      }\n\n      const $ = cheerio.load(body);\n\n      if (YOUTUBE_REG.test(url)) {\n        return resolve(pickAll(TARGET_META_PROPERTYS)(WebParser.parseMeta($)));\n      }\n\n      return resolve(WebParser.parseMeta($));\n    })\n  })\n}\n\n\nWebParser.parseMeta = ($) => {\n  const pickPropertyMeta = (i, elm) => ({\n    [$(elm).prop('property')]: $(elm).prop('content')\n  });\n\n  const metasArray = Array.prototype.slice.call($('meta[property]').map(pickPropertyMeta));\n  \n  return metasArray.reduce((acc, curr) => {\n    for (var key in curr) {\n      acc[key] = curr[key];\n    }\n\n    return acc;\n  }, {})\n}\n\nmodule.exports = WebParser;\n\n"]}