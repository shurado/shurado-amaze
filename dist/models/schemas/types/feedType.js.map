{"version":3,"sources":["../../../../src/models/schemas/types/feedType.js"],"names":["require","GraphQLID","GraphQLObjectType","GraphQLString","GraphQLInt","GraphQLList","GraphQLNonNull","SpotType","userType","comment","Comment","uniq","array","reduce","acc","curr","indexOf","push","imageType","name","description","fields","hd","type","normal","commentType","user_id","feed_id","text","createdAt","user","resolve","getUser","feedType","id","caption","image_url","comment_count","feed","Promise","count","attributes","group","where","then","result","commenter_ids","getComments","comments","map","args","offset","limit","spot","getSpots","spots","author","updatedAt","feedById","module","exports"],"mappings":"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","file":"feedType.js","sourcesContent":["const { \n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n} = require('graphql');\n\nconst SpotType = require('./SpotType');\nconst userType = require('./userType');\nconst comment = require('../../../models');\n\nconst Comment = comment;\n\nconst uniq = (array) => {\n  return array.reduce((acc, curr) => {\n    if (acc.indexOf(curr) === -1) {\n      acc.push(curr);\n    }\n\n    return acc;\n  }, [])\n}\n\n\nconst imageType = new GraphQLObjectType({\n  name: 'imageType',\n  description: 'image url',\n  fields: {\n    hd: {\n      type: GraphQLString\n    },\n    normal: {\n      type: GraphQLString\n    }\n  }\n})\n\nconst commentType = new GraphQLObjectType({\n  name: 'commentType',\n  description: 'comment of a feed',\n  fields: {\n    user_id: {\n      type: GraphQLID\n    },\n    feed_id: {\n      type: GraphQLID\n    },\n    text: {\n      type: GraphQLString\n    },\n    createdAt: {\n      type: GraphQLString\n    },\n    user: {\n      type: userType,\n      resolve: (comment) => comment.getUser()\n    }\n  }\n})\n\nconst feedType = new GraphQLObjectType({\n  name: 'feedType',\n  description: '使用者動態',\n  fields: {\n    id: {\n      type: new GraphQLNonNull(GraphQLID)\n    },\n    caption: {\n      type: GraphQLString\n    },\n    image_url: {\n      type: imageType\n    },\n    comment_count: {\n      type: GraphQLInt,\n      resolve: (feed) => {\n        return new Promise(resolve => {\n          Comment\n            .count({ attributes: ['user_id'], group: ['user_id'], where: { feed_id: feed.id } })\n            .then(result => resolve((result[0] && result[0].count) || 0))\n        })\n      }\n    },\n    commenter_ids: {\n      type: new GraphQLList(GraphQLInt),\n      resolve: (feed) => Promise.resolve(\n        feed\n          .getComments({ attributes: ['user_id'] })\n          .then(comments => comments.map(comment => comment.user_id))\n          .then(uniq)\n      )\n    },\n    comments: {\n      type: new GraphQLList(commentType),\n      args: {\n        offset: { type: GraphQLInt },\n        limit: { type: GraphQLInt }\n      },\n      resolve: (feed, args) => Promise.resolve(\n        feed.getComments({\n          limit: args.limit || 3,\n          offset: args.offset || 0\n        })\n      )\n    },\n    spot: {\n      type: SpotType,\n      resolve: (feed) => feed.getSpots().then(spots => spots[0])\n    },\n    author: {\n      type: userType,\n      resolve: (feed) => Promise.resolve(feed.user)\n    },\n    createdAt: {\n      type: GraphQLString,\n    },\n    updatedAt: {\n      type: GraphQLString,\n    }\n  }\n});\n\nconst feedById = new GraphQLObjectType({\n  name: 'FeedById', \n  description: 'feed by id',\n  fields: {\n    feed: {\n      type: feedType,\n      args: {\n        id: {\n          type: GraphQLID\n        }\n      }\n    }    \n  }\n});\n\nmodule.exports = {\n  feedType,\n  feedById,\n};\n"]}