{"version":3,"sources":["../../../src/models/schemas/index.js"],"names":["require","GraphQLSchema","GraphQLID","GraphQLObjectType","GraphQLInt","GraphQLList","GraphQLNonNull","feedType","userType","InfoType","createFeed","feed","comment","Feed","Comment","queryType","name","description","fields","user","type","args","userId","info","resolve","_","Promise","all","findAndCountAll","where","user_id","attributes","feeds","offset","findAll","limit","FEEDS_LIMIT","include","order","id","findById","then","userFeeds","mutation","schema","query","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\nconst { \n  GraphQLSchema,\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n} = require('graphql');\n\nconst { feedType } = require('./types/feedType');\nconst userType = require('./types/userType');\nconst InfoType = require('./types/InfoType');\nconst createFeed = require('./mutations/createFeed');\n\nconst {\n  feed,\n  comment,\n} = require('../../models/');\n\nconst Feed = feed;\nconst Comment = comment;\n\nconst queryType = new GraphQLObjectType({\n  name: 'QueryType',\n  description: 'The root query type',\n  fields: {\n    user: {\n      type: userType,\n      args: {\n        userId: {\n          type: new GraphQLNonNull(GraphQLID)\n        }\n      }\n    },\n    info: {\n      type: InfoType,\n      args: {\n        userId: { type: new GraphQLNonNull(GraphQLID) } \n      },\n      resolve: (_, args) => {\n        return Promise.all([\n          Feed.findAndCountAll({ where: { user_id: args.userId }, attributes: ['id'] }),\n          Comment.findAndCountAll({ where: { user_id: args.userId }, attributes: ['id'] })\n        ])\n      }\n    },\n    feeds: {\n      type: new GraphQLList(feedType),\n      args: {\n        offset: { type: GraphQLInt },\n      },\n      resolve: (_, args) => Feed.findAll({ limit: Feed.FEEDS_LIMIT, include: ['user'], offset: args.offset, order: [['createdAt', 'DESC']] })\n    },\n    feed: {\n      type: feedType,\n      args: {\n        id: {\n          type: GraphQLID\n        }\n      },\n      resolve: (_, args) => new Promise(resolve => {\n        Feed.findById(args.id, { include: ['user'] }).then(resolve);\n      })\n    },\n    userFeeds: {\n      type: new GraphQLList(feedType),\n      args: {\n        user_id: { type: GraphQLID }\n      },\n      resolve: (_, { user_id }) => Promise.resolve(Feed.findAll({ where: { user_id } }))\n    }\n  }\n});\n\n/**\n * [mutation description]\n * @type {GraphQLObjectType}\n *\n * - createFeed\n * - removeFeed\n * - editFeed\n * \n * - createUser\n * - removeUser\n * \n */\nconst mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'The root Mutation Object',\n  fields: {\n    createFeed: createFeed\n  }\n})\n\nconst schema = new GraphQLSchema({\n  query: queryType,\n  mutation: mutation\n});\n\n\nmodule.exports = schema;\n"]}