{"version":3,"sources":["../../../../src/models/schemas/mutations/createFeed.js"],"names":["require","GraphQLInputObjectType","GraphQLNonNull","GraphQLID","GraphQLString","mutationWithClientMutationId","feedType","userType","feed","user","Feed","User","imageInputType","name","fields","hd","type","normal","feedMutation","inputFields","caption","image_url","user_id","outputFields","resolve","feed_id","Promise","findById","then","author","mutateAndGetPayload","reject","create","id","catch","module","exports"],"mappings":";;eAKIA,QAAQ,SAAR,C;IAJFC,sB,YAAAA,sB;IACAC,c,YAAAA,c;IACAC,S,YAAAA,S;IACAC,a,YAAAA,a;;gBAKEJ,QAAQ,eAAR,C;IADFK,4B,aAAAA,4B;;gBAGmBL,QAAQ,mBAAR,C;IAAbM,Q,aAAAA,Q;;AACR,IAAMC,WAAWP,QAAQ,mBAAR,CAAjB;;gBAEuBA,QAAQ,aAAR,C;IAAfQ,I,aAAAA,I;IAAMC,I,aAAAA,I;;AAEd,IAAMC,OAAOF,IAAb;AACA,IAAMG,OAAOF,IAAb;;AAEA,IAAMG,iBAAiB,IAAIX,sBAAJ,CAA2B;AAChDY,QAAM,gBAD0C;AAEhDC,UAAQ;AACNC,QAAI,EAAEC,MAAMZ,aAAR,EADE;AAENa,YAAQ,EAAED,MAAMZ,aAAR;AAFF;AAFwC,CAA3B,CAAvB;;AAQA,IAAMc,eAAeb,6BAA6B;AAChDQ,QAAM,YAD0C;AAEhDM,eAAa;AACXC,aAAS;AACPJ,YAAM,IAAId,cAAJ,CAAmBE,aAAnB;AADC,KADE;AAIXiB,eAAW;AACTL,YAAMJ;AADG,KAJA;AAOXU,aAAS;AACPN,YAAM,IAAId,cAAJ,CAAmBC,SAAnB;AADC;AAPE,GAFmC;AAahDoB,gBAAc;AACZf,UAAM;AACJQ,YAAMV,QADF;AAEJkB,eAAS;AAAA,YAAGC,OAAH,QAAGA,OAAH;AAAA,eAAiB,IAAIC,OAAJ,CAAY;AAAA,iBAAWhB,KAAKiB,QAAL,CAAcF,OAAd,EAAuBG,IAAvB,CAA4BJ,OAA5B,CAAX;AAAA,SAAZ,CAAjB;AAAA;AAFL,KADM;AAKZK,YAAQ;AACNb,YAAMT,QADA;AAENiB,eAAS;AAAA,YAAGF,OAAH,SAAGA,OAAH;AAAA,eAAiB,IAAII,OAAJ,CAAY;AAAA,iBAAWf,KAAKgB,QAAL,CAAcL,OAAd,EAAuBM,IAAvB,CAA4BJ,OAA5B,CAAX;AAAA,SAAZ,CAAjB;AAAA;AAFH;AALI,GAbkC;AAuBhDM,uBAAqB;AAAA,QAAGV,OAAH,SAAGA,OAAH;AAAA,QAAYC,SAAZ,SAAYA,SAAZ;AAAA,QAAuBC,OAAvB,SAAuBA,OAAvB;AAAA,WAAqC,IAAII,OAAJ,CAAY,UAACF,OAAD,EAAUO,MAAV,EAAqB;AACzFrB,WAAKsB,MAAL,CAAY;AACVZ,wBADU;AAEVC,4BAFU;AAGVC;AAHU,OAAZ,EAIGM,IAJH,CAIQ,UAACpB,IAAD;AAAA,eAAW;AACjBiB,mBAASjB,KAAKyB,EADG;AAEjBX;AAFiB,SAAX;AAAA,OAJR,EAQGM,IARH,CAQQJ,OARR,EASGU,KATH,CASSH,MATT;AAUD,KAXyD,CAArC;AAAA;AAvB2B,CAA7B,CAArB;;AAqCAI,OAAOC,OAAP,GAAiBlB,YAAjB","file":"createFeed.js","sourcesContent":["const {\n  GraphQLInputObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLString,\n} = require('graphql');\n\nconst {\n  mutationWithClientMutationId,\n} = require('graphql-relay');\n\nconst { feedType } = require('../types/feedType');\nconst userType = require('../types/userType');\n\nconst { feed, user } = require('../../index');\n\nconst Feed = feed;\nconst User = user;\n\nconst imageInputType = new GraphQLInputObjectType({\n  name: 'ImageInputType',\n  fields: {\n    hd: { type: GraphQLString },\n    normal: { type: GraphQLString }\n  }\n})\n\nconst feedMutation = mutationWithClientMutationId({\n  name: 'CreateFeed',\n  inputFields: {\n    caption: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    image_url: {\n      type: imageInputType\n    },\n    user_id: {\n      type: new GraphQLNonNull(GraphQLID),\n    }\n  },\n  outputFields: {\n    feed: { \n      type: feedType,\n      resolve: ({ feed_id }) => new Promise(resolve => Feed.findById(feed_id).then(resolve))\n    },\n    author: {\n      type: userType,\n      resolve: ({ user_id }) => new Promise(resolve => User.findById(user_id).then(resolve))\n    }\n  },\n  mutateAndGetPayload: ({ caption, image_url, user_id }) => new Promise((resolve, reject) => {\n    Feed.create({\n      caption,\n      image_url,\n      user_id\n    }).then((feed) => ({\n      feed_id: feed.id,\n      user_id\n    }))\n      .then(resolve)\n      .catch(reject)\n  })\n})\n\nmodule.exports = feedMutation;\n"]}