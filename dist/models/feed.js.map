{"version":3,"sources":["../../src/models/feed.js"],"names":["require","serialize","module","exports","sequelize","DataTypes","feed","define","caption","type","TEXT","validate","notEmpty","msg","image_url","HSTORE","validValue","value","URL_REG","Object","keys","every","test","key","Error","FEEDS_LIMIT","associate","models","belongsTo","user","foreignKey","hasMany","comment","belongsToMany","spot","through","timestamps","prototype","edit","save","updateImage","assign","getImageURLByField","findOne","where","$contains","then","dataValues","getNextPageFeeds","nextPageFeed","findAll","include","model","status","$not","limit","order","createdAt","$gt","id","addFeedSpot","name","x","y","self","Promise","result","resolve","addSpot","createSpot","location","coordinates","querySpot","query","spread","results","addCommentToFeed","text","comment_type","user_id","createComment","getActiveComments","getComments","scope","comments","map","serializeFields"],"mappings":"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","file":"feed.js","sourcesContent":["\nconst { serialize } = require('../utils');\n\nmodule.exports = function(sequelize, DataTypes) {\n  const feed = sequelize.define('feed', {\n    caption: {\n      type: DataTypes.TEXT,\n      validate: {\n        notEmpty: {\n          msg: '貼文內容不可為空白！',\n        }\n      }\n    },\n    image_url: {\n      type: DataTypes.HSTORE,\n      validate: {\n        validValue: function(value) {\n          const URL_REG = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\n\n          if (!Object.keys(value).every(key => URL_REG.test(value[key]))) {\n            throw Error('必須為正確的 URL 格式');\n          }\n        }\n      }\n    }\n  })\n\n  feed.FEEDS_LIMIT = 15;\n\n  feed.associate = function(models) {\n    feed.belongsTo(models.user, { foreignKey: 'user_id' })\n    feed.hasMany(models.comment, { foreignKey: 'feed_id'} );\n    feed.belongsToMany(models.spot, { through: 'spots_feeds', foreignKey: 'feed_id',  timestamps: false })\n  }\n\n  feed.prototype.edit = function({ caption }) {\n    this.caption = caption;\n    return this.save();\n  }\n\n  feed.prototype.updateImage = function(image_url) {\n    this.image_url = Object.assign(this.image_url || {}, image_url);\n    return this.save();\n  }\n\n  feed.getImageURLByField = function(image_url) {\n    return feed.findOne({ where: {\n      image_url: { $contains: image_url }\n    } }).then(feed => feed.dataValues);\n  }\n\n  feed.prototype.getNextPageFeeds = function(nextPageFeed) {\n    return feed.findAll({\n      include: [{\n        model: sequelize.models.comment,\n        where: { status: { $not: 'deleted' } },\n        limit: 20,\n        order: [['createdAt', 'DESC']],\n      }],\n      where: {\n        createdAt: { $gt: nextPageFeed.createdAt },\n        id: { $gt: nextPageFeed.id }\n      },\n      limit: feed.FEEDS_LIMIT,\n      order: [['createdAt', 'DESC']]\n    })\n  }\n\n  feed.prototype.addFeedSpot = function({ name, x, y }) {\n    const self = this;\n    return new Promise(resolve => {\n      sequelize.models.spot.findOne({ where: { name } })\n        .then(result => {\n          if (result) {\n            resolve(this.addSpot(result).then(() => self))\n          } else {\n            resolve(this.createSpot({\n              name,\n              location: {\n                type: 'POINT',\n                coordinates: [x, y]\n              }\n            }))\n          }\n        })\n    })\n  }\n\n  feed.prototype.querySpot = function({x, y}) {\n    return new Promise((resolve) => {\n      sequelize.query(`SELECT * FROM spots WHERE location ~= '(${x}, ${y})'::point`)\n        .spread((results) => {\n          resolve(results);\n        })\n    })\n  }\n\n  feed.prototype.addCommentToFeed = function({ text, comment_type, user_id }) {\n    return this.createComment({\n      text,\n      comment_type,\n      user_id\n    });\n  }\n\n  feed.prototype.getActiveComments = function() {\n    return this\n      .getComments({ \n        include: ['user'],\n        scope: 'active',\n        order: [['createdAt', 'DESC']] \n      })\n      .then(comments => comments.map(comment => serialize(comment.serializeFields, comment)))\n  }\n\n  feed.prototype.serializeFields = ['caption', 'image_url', 'user'];\n\n\n  return feed;\n};\n"]}