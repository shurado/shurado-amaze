{"version":3,"sources":["../../src/models/user.js"],"names":["jwt","require","moment","module","exports","sequelize","DataTypes","user","define","username","type","STRING","validate","notEmpty","msg","nickname","website","isUrl","introduction","avatar_url","HSTORE","social_account","gender","ENUM","birthday","DATE","isGreaterThanTen","value","subtract","toDate","Error","email","unique","isEmail","prototype","serializeFields","associate","models","hasMany","feed","foreignKey","comment","belongsToMany","as","through","tokenForUser","secret","timestamp","Date","getTime","encode","sub","id","iat"],"mappings":";;AACA,IAAMA,MAAMC,QAAQ,YAAR,CAAZ;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;AAEAE,OAAOC,OAAP,GAAiB,UAASC,SAAT,EAAoBC,SAApB,EAA+B;AAC9C,MAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,cAAU;AACRC,YAAMJ,UAAUK,MADR;AAERC,gBAAU;AACRC,kBAAU;AACRC,eAAK;AADG;AADF;AAFF,KAD0B;AASpCC,cAAU;AACRL,YAAMJ,UAAUK,MADR;AAERC,gBAAU;AACRC,kBAAU;AACRC,eAAK;AADG;AADF;AAFF,KAT0B;AAiBpCE,aAAS;AACPN,YAAMJ,UAAUK,MADT;AAEPC,gBAAU;AACRK,eAAO;AACLH,eAAK;AADA,SADC;AAIRD,kBAAU;AACRC,eAAK;AADG;AAJF;AAFH,KAjB2B;AA4BpCI,kBAAc;AACZR,YAAMJ,UAAUK,MADJ;AAEZC,gBAAU;AACRC,kBAAU;AACRC,eAAK;AADG;AADF;AAFE,KA5BsB;AAoCpCK,gBAAYb,UAAUc,MApCc;AAqCpCC,oBAAgBf,UAAUc,MArCU;AAsCpCE,YAAQhB,UAAUiB,IAAV,CAAe,CAAC,QAAD,EAAW,MAAX,CAAf,CAtC4B;AAuCpCC,cAAU;AACRd,YAAMJ,UAAUmB,IADR;AAERb,gBAAU;AACRc,0BAAkB,0BAASC,KAAT,EAAgB;AAChC,cAAIA,QAAQzB,SAAS0B,QAAT,CAAkB,EAAlB,EAAsB,OAAtB,EAA+BC,MAA/B,EAAZ,EAAqD;AACnD,kBAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,WAFD,MAEO,IAAIH,QAAQzB,SAAS0B,QAAT,CAAkB,GAAlB,EAAuB,OAAvB,EAAgCC,MAAhC,EAAZ,EAAsD;AAC3D,kBAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN;AACD;AACF;AAPO;AAFF,KAvC0B;AAmDpCC,WAAO;AACLrB,YAAMJ,UAAUK,MADX;AAELqB,cAAQ,IAFH;AAGLpB,gBAAU;AACRC,kBAAU;AACRC,eAAK;AADG,SADF;AAIRmB,iBAAS;AACPnB,eAAK;AADE;AAJD;AAHL;AAnD6B,GAAzB,CAAb;;AAiEAP,OAAK2B,SAAL,CAAeC,eAAf,GAAiC,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,EAAoC,cAApC,EAAoD,YAApD,EAAkE,UAAlE,EAA8E,OAA9E,CAAjC;;AAEA5B,OAAK6B,SAAL,GAAiB,UAASC,MAAT,EAAiB;AAChC9B,SAAK+B,OAAL,CAAaD,OAAOE,IAApB,EAA0B,EAAEC,YAAY,SAAd,EAA1B;AACAjC,SAAK+B,OAAL,CAAaD,OAAOI,OAApB,EAA6B,EAAED,YAAY,SAAd,EAA7B;AACAjC,SAAKmC,aAAL,CAAmBL,OAAO9B,IAA1B,EAAgC,EAAEoC,IAAI,eAAN,EAAuBC,SAAS,WAAhC,EAA6CJ,YAAY,SAAzD,EAAhC;AACD,GAJD;;AAMAjC,OAAK2B,SAAL,CAAeW,YAAf,GAA8B,UAASC,MAAT,EAAiB;AAC7C,QAAMC,YAAY,IAAIC,IAAJ,GAAWC,OAA7B;AACA,WAAOjD,IAAIkD,MAAJ,CAAW,EAAEC,KAAK,KAAKC,EAAZ,EAAgBC,KAAKN,SAArB,EAAX,EAA6CD,MAA7C,CAAP;AACD,GAHD;;AAKA,SAAOvC,IAAP;AACD,CAhFD","file":"user.js","sourcesContent":["\nconst jwt = require('jwt-simple');\nconst moment = require('moment');\n\nmodule.exports = function(sequelize, DataTypes) {\n  const user = sequelize.define('user', {\n    username: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n          msg: 'username 不可為空白'\n        },\n      }\n    },\n    nickname: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n          msg: '暱稱不可為空白'\n        },\n      }\n    },\n    website: {\n      type: DataTypes.STRING,\n      validate: {\n        isUrl: {\n          msg: '網站連結必須為正確 URL (以 http:// 或 https:// 開頭)'\n        },\n        notEmpty: {\n          msg: '網站連結不可為空白',\n        }\n      }\n    },\n    introduction: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n          msg: '自我介紹不可為空白'\n        }\n      }\n    },\n    avatar_url: DataTypes.HSTORE,\n    social_account: DataTypes.HSTORE,\n    gender: DataTypes.ENUM(['female', 'male']),\n    birthday: {\n      type: DataTypes.DATE,\n      validate: {\n        isGreaterThanTen: function(value) {\n          if (value > moment().subtract(12, 'years').toDate()) {\n            throw new Error('生日必須小於現在日期，且年滿 12 歲以上！');\n          } else if (value < moment().subtract(100, 'years').toDate()) {\n            throw new Error('請輸入合法日期格式！');\n          }\n        }\n      }\n    },\n    email: {\n      type: DataTypes.STRING,\n      unique: true,\n      validate: {\n        notEmpty: {\n          msg: 'email 不可為空白'\n        },\n        isEmail: {\n          msg: '必須為正確的 email 格式'\n        }\n      }\n    }\n  });\n\n  user.prototype.serializeFields = ['username', 'nickname', 'website', 'introduction', 'avatar_url', 'birthday', 'email'];\n  \n  user.associate = function(models) {\n    user.hasMany(models.feed, { foreignKey: 'user_id' });\n    user.hasMany(models.comment, { foreignKey: 'user_id' });\n    user.belongsToMany(models.user, { as: 'UserFollowers', through: 'followers', foreignKey: 'user_id' })\n  }\n  \n  user.prototype.tokenForUser = function(secret) {\n    const timestamp = new Date().getTime\n    return jwt.encode({ sub: this.id, iat: timestamp }, secret);\n  }\n  \n  return user;\n};\n"]}