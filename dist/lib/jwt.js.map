{"version":3,"sources":["../../src/lib/jwt.js"],"names":["passport","require","Strategy","ExtractJwt","dotenv","User","user","pathOr","config","serializeUser","done","id","deserializeUser","findById","then","catch","err","fromCookie","req","jwtOptions","jwtFromRequest","fromExtractors","fromHeader","secretOrKey","process","env","SECRET_KEY","jwtLogin","payload","sub","use","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;eACiCA,QAAQ,cAAR,C;IAAzBC,Q,YAAAA,Q;IAAUC,U,YAAAA,U;;AAClB,IAAMC,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,OAAOJ,QAAQ,WAAR,EAAqBK,IAAlC;;gBACmBL,QAAQ,OAAR,C;IAAXM,M,aAAAA,M;;AAERH,OAAOI,MAAP;;AAEAR,SAASS,aAAT,CAAuB,UAACH,IAAD,EAAOI,IAAP,EAAgB;AACrCA,OAAK,IAAL,EAAWJ,KAAKK,EAAhB;AACD,CAFD;;AAIAX,SAASY,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACrCL,OAAKQ,QAAL,CAAcF,EAAd,EACGG,IADH,CACQ,UAACR,IAAD;AAAA,WAAUI,KAAK,IAAL,EAAWJ,IAAX,CAAV;AAAA,GADR,EAEGS,KAFH,CAES,UAACC,GAAD;AAAA,WAASN,KAAKM,GAAL,EAAU,KAAV,CAAT;AAAA,GAFT;AAGD,CAJD;;AAMA,IAAMC,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC/B,SAAOX,OAAO,IAAP,EAAa,CAAC,SAAD,EAAY,WAAZ,CAAb,EAAuCW,GAAvC,CAAP;AACD,CAFD;;AAIA,IAAMC,aAAa;AACjBC,kBAAgBjB,WAAWkB,cAAX,CAA0B,CAACJ,UAAD,EAAad,WAAWmB,UAAX,CAAsB,eAAtB,CAAb,CAA1B,CADC;AAEjBC,eAAaC,QAAQC,GAAR,CAAYC;AAFR,CAAnB;;AAKA;AACA,IAAMC,WAAW,IAAIzB,QAAJ,CAAaiB,UAAb,EAAyB,UAACS,OAAD,EAAUlB,IAAV;AAAA,SACxCL,KAAKQ,QAAL,CAAce,QAAQC,GAAtB,EACGf,IADH,CACQ;AAAA,WAAQJ,KAAK,IAAL,EAAWJ,IAAX,CAAR;AAAA,GADR,EAEGS,KAFH,CAES;AAAA,WAAOL,KAAKM,GAAL,EAAU,KAAV,CAAP;AAAA,GAFT,CADwC;AAAA,CAAzB,CAAjB;;AAMAhB,SAAS8B,GAAT,CAAaH,QAAb;;AAEAI,OAAOC,OAAP,GAAiBL,QAAjB","file":"jwt.js","sourcesContent":["const passport = require('passport');\nconst { Strategy, ExtractJwt } = require('passport-jwt');\nconst dotenv = require('dotenv');\nconst User = require('../models').user;\nconst { pathOr } = require('ramda');\n\ndotenv.config();\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id)\n    .then((user) => done(null, user))\n    .catch((err) => done(err, false));\n});\n\nconst fromCookie = function(req) {\n  return pathOr(null, ['cookies', 'jwt_token'])(req);\n}\n\nconst jwtOptions = {\n  jwtFromRequest: ExtractJwt.fromExtractors([fromCookie, ExtractJwt.fromHeader('authorization')]),\n  secretOrKey: process.env.SECRET_KEY\n};\n\n/* payload from JWT */\nconst jwtLogin = new Strategy(jwtOptions, (payload, done) =>\n  User.findById(payload.sub)\n    .then(user => done(null, user))\n    .catch(err => done(err, false))\n)\n\npassport.use(jwtLogin);\n\nmodule.exports = jwtLogin\n\n"]}