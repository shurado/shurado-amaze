{"version":3,"sources":["../../../src/__tests__/api/user.js"],"names":["describe","beforeAll","user","create","email","it","done","findOne","then","id","get","userId","expect","res","body","hasOwnProperty","toBeTruthy","expected","message","toEqual","token","tokenForUser","post","send","nickname","set","end","err","status","toBe","website","Array","isArray","errors","afterAll","destroy","where"],"mappings":"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","file":"user.js","sourcesContent":["import db from '../../models';\nimport app from '../../app';\nimport request from 'supertest';\n\ndescribe('User profile function', () => {\n  beforeAll(() => {\n    return db.user.create({\n      email: 'test@gmail.com'\n    })\n  });\n\n  it('should get user profile if user did exist', (done) => {\n    db.user.findOne()\n      .then(user => user.id)\n      .then(userId => {\n        request(app).get(`/user/${userId}/profile`)\n          .then(res => {\n            expect(res.body.hasOwnProperty('profile')).toBeTruthy()\n            done();\n          })\n      })\n  });\n\n  it('should return 404 if user didn\\'t exist', (done) => {\n    request(app).get('/user/798765412/profile')\n      .then(res => {\n        const expected = {\n          message: 'user doesn\\'t exist'\n        }\n\n        expect(res.body).toEqual(expected);\n        done()\n      })\n  })\n\n  it('can edit profile if owner', (done) => {\n    db.user\n      .findOne()\n      .then(user => ({\n        userId: user.id,\n        token: user.tokenForUser(\"ji3g4284gj94ek\")\n      }))\n      .then(({userId,token}) => {\n        request(app)\n          .post(`/user/${userId}/profile`)\n          .send({ nickname: 'kalan' })\n          .set('Cookie', `jwt_token=${token}`)\n          .end((err, res) => {\n            expect(res.status).toBe(200);\n            expect(res.body.user.nickname).toBe('kalan');\n\n            done();\n          })\n      })\n  });\n\n  it('can show error if user input wrong params', (done) => {\n    db.user\n      .findOne()\n      .then(user => ({\n        userId: user.id,\n        token: user.tokenForUser(\"ji3g4284gj94ek\")\n      }))\n      .then(({userId, token}) => {\n        request(app)\n          .post(`/user/${userId}/profile`)\n          .send({ nickname: '', website: '   ' })\n          .set('Cookie', `jwt_token=${token}`)\n          .end((err, res) => {\n            \n            const expected = Array.isArray(res.body.errors);\n\n            expect(expected).toBeTruthy();\n            done()\n          })\n      })\n  })\n\n  it('can not edit user profile if not owner', (done) => {\n    db.user\n      .findOne()\n      .then(user => user.id)\n      .then(userId => {\n        request(app).post(`/user/${userId}/profile`)\n          .then(res => {\n            expect(res.status).toBe(401);\n            done()\n          })\n      })\n  });\n\n\n  afterAll(() => {\n    return db.user.destroy({ where: { email: 'test@gmail.com' }})\n  })  \n});\n"]}