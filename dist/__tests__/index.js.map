{"version":3,"sources":["../../src/__tests__/index.js"],"names":["describe","it","get","then","expect","res","statusCode","toBe","done","headers","location","toMatch","beforeAll","feed","create","caption","image_url","normal","afterAll","destroy","where","findOne","addFeedSpot","name","x","y","spots","spot","expected","toEqual","querySpot","console","log","results","catch","result","length","toBeGreaterThan"],"mappings":"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","file":"index.js","sourcesContent":["import request from 'supertest';\nimport app from '../app.js';\nimport db from '../models';\n\ndescribe('test root path', function() {\n  it('should response the GET method', done => {\n    request(app).get('/').then(res => {\n      expect(res.statusCode).toBe(200);\n      done();\n    })\n  })\n});\n\ndescribe('test facebook login', () => {\n  it('should redirect facebook', done => {\n    request(app).get('/auth/facebook')\n      .then(res => {\n        \n        expect(res.statusCode).toBe(302);\n        expect(res.headers.location).toMatch(/https\\:\\/\\/www.facebook.com\\/dialog\\/oauth/);\n        done();    \n      })\n  })\n})\n\ndescribe('Get next page feed', function() {\n  // beforeAll(() => {\n  //   var comments = [];\n  //   for (var i = 0; i < 10; i++) {\n  //     var comment = db.comment.build({\n  //       text: '你的建議很棒' + i,\n  //       user_id: ''\n  //     })\n  //   }\n\n  //   return db.feed.\n  // })\n});\n\n\ndescribe('test feed functionality', () => {\n  beforeAll(() => {\n    return db.feed.create({ caption: '這邊好好玩', image_url: { normal: 'https://www.image.url' } });\n  });\n\n  afterAll(() => {\n    return db.feed.destroy({ where: { caption: '這邊好好玩'} });\n  })\n\n  it('should add spot if feed spot is new', (done) => {\n    db.feed.findOne()\n      .then(feed => feed.addFeedSpot({name: '藍瓶咖啡廳', x:20, y:25.456 }))\n      .then((spots) => {\n        const spot = spots[0];\n        const expected = {\n          location: { x: 20, y: 25.456 },\n          name: '藍瓶咖啡廳',\n        };\n\n        const { location, name } = spot;\n        expect({\n          location,\n          name\n        }).toEqual(expected);\n      })\n      .then(done)\n  })\n  \n  it('can return correct value if spot did exist.', (done) => {\n    db.feed.findOne().then(feed => feed.querySpot({x:10.25, y:25.100000000000001})\n        .then(results => {\n          console.log(results);\n          expect(results[0].name).toBe('藍瓶咖啡聽')\n          expect(results[0].location).toEqual({\n            x: 10.25,\n            y: 25.1\n          })\n\n          done();\n        })\n        .catch(done)\n      );\n  })\n\n  it('can add feed spot', (done) => {\n    db.feed.findOne()\n      .then(feed => feed.addFeedSpot({name: '123', x: 2, y: 3}))\n      .then((result) => {\n        expect(result.length).toBeGreaterThan(0)\n        done();\n      })\n  })\n  \n})\n\n\n"]}