{"version":3,"sources":["../../src/utils/index.js"],"names":["require","pick","pickAll","pathOr","isNil","toHumanReadable","message","reg","replace","split","serialize","fields","model","Array","isArray","TypeError","convertByteSize","byte","KB","MB","GB","Math","floor","toString","pickDataValues","data","nullResponse","res","nullable","process","env","NODE_ENV","console","log","status","json","getReqAccept","req","accepts","render404","err","error","render","uniq","array","reduce","acc","curr","indexOf","push","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const { pick, pickAll, pathOr, isNil } = require('ramda');\n\nconst toHumanReadable = (message, reg) =>\n  message.replace(/(Validation error:)+/g, '').replace(/\\n/g, '').split(',')\n\nconst serialize = (fields, model) => {\n  if (!model) {\n    return null;\n  }\n\n  if (Array.isArray(fields)) {\n    return pick(fields, model);\n  } else {\n    return new TypeError('`serialize fields` should be an array');\n  }\n  \n}\n\nconst convertByteSize = (byte) => {\n  const KB = 1024;\n  const MB = 1024 * 1024;\n  const GB = 1024 * 1024 * 1024;\n\n  if (byte > 0 && byte < MB) {\n    return Math.floor(byte / KB).toString() + 'KB';\n  } else if (byte > KB && byte < GB) {\n    return Math.floor(byte / MB).toString() + 'MB';\n  } else {\n    return Math.floor(byte / GB).toString() + 'GB';\n  }\n\n  return 0;\n}\n\n/**\n * use for pick data value from Sequlize Object.\n * Sequlize object has complex structure.\n * to fetch its dataValues, you can use this function.\n * \n * @param  [Sequelize Model] model\n * @return {object || null}\n */\nconst pickDataValues = (model) => {\n  if (model) {\n    const data = pickAll(['dataValues'])(model);\n    return pathOr(null, ['dataValues'])(data);\n  } \n\n  return null;\n}\n\nconst nullResponse = (res) => (nullable) => {\n  if(process.env.NODE_ENV === 'development') {\n    console.log('passing null value, return 404 by default.');\n  }\n\n  if (isNil(nullable)) {\n    res.status(400).json();\n  }\n}\n\nconst getReqAccept = (req) => {\n  return req.accepts(['application/json', 'html']);\n}\n\nconst render404 = (req, res) => {\n  switch(getReqAccept(req)) {\n    case 'application/json':\n      return res.status(err.status || 500).json({\n        error: err,\n        message: err.message\n      });\n    case 'html':\n      return res\n        .status(err.status || 500)\n        .render('error', {\n          error: err,\n          message: err.message\n        });\n  }\n\n  return res\n          .status(err.status || 500)\n          .render('error', {\n            error: err,\n            message: err.message\n          });\n}\n\nconst uniq = (array) => {\n  return array.reduce((acc, curr) => {\n    if (acc.indexOf(curr) === -1) {\n      acc.push(curr);\n    }\n\n    return acc;\n  }, [])\n}\n\nmodule.exports = {\n  toHumanReadable,\n  serialize,\n  convertByteSize,\n  pickDataValues,\n  nullResponse,\n  getReqAccept,\n  render404,\n};\n"]}